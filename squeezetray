#!/usr/bin/env python
import wx
import time

import httplib, urllib
import sys
import socket
import time
from threading import *
import wx
from Queue import Queue
from threading import Thread
import datetime
import sys, traceback
# simplejson is included with Python 2.6 and above
# with the name json
if float(sys.version[:3]) >= 2.6:
    import json
else:
    # python 2.4 or 2.5 can also import simplejson
    # as working alternative to the json included.
    import simplejson as json
    
from sqtray.models import Observable, squeezeConMdle, squeezePlayerMdl

TRAY_TOOLTIP = 'System Tray Demo'
TRAY_ICON = 'icon.png'


def create_menu_item(menu, label, func):
    item = wx.MenuItem(menu, -1, label)
    menu.Bind(wx.EVT_MENU, func, id=item.GetId())
    menu.AppendItem(item)
    return item





# Define notification event for thread completion
EVT_RESULT_ID = wx.NewId()
EVT_RESULT_CONNECTED_ID = wx.NewId()
EVT_RESULT_PLAYERS_ID = wx.NewId()
EVT_RESULT_CURRENT_TRACK_ID = wx.NewId()



class ResultEvent(wx.PyEvent):
    """Simple event to carry arbitrary result data."""
    def __init__(self, data):
        """Init Result Event."""
        wx.PyEvent.__init__(self)
        self.SetEventType(EVT_RESULT_ID)
        self.data = data

class ResultEvent2(wx.PyEvent):
    """Simple event to carry arbitrary result data."""
    def __init__(self, wxTypeId, data):
        """Init Result Event."""
        wx.PyEvent.__init__(self)
        self.SetEventType(wxTypeId)
        self.data = data

        
class SqueezeConnectionWorker(Thread):
    """Thread executing tasks from a given tasks queue"""
    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()
        self.connectionString = None
    def run(self):
        while True:
            func,params, args, kargs = self.tasks.get()
            if not hasattr(self,'conn'):
                self.tasks.task_done()
                return
            if self.connectionString == None:
                self.tasks.task_done()
                return
            try:
                self.conn.request("POST", "/jsonrpc.js", params)
            except socket.error:
                self.tasks.task_done()
                return
            try:
                response = self.conn.getresponse()
            except httplib.BadStatusLine:
                self.conn = httplib.HTTPConnection(self.connectionString)
                self.conn.request("POST", "/jsonrpc.js", params)
                response = self.conn.getresponse()

            if response.status != 200:
                print response.status, response.reason
            #return response.read()
            rep = json.loads(response.read())
            if func != None:
                func(rep,*args, **kargs)
                #try: func(rep)
                #except Exception, e: 
                #    print e
                #    #traceback.print_tb(e, limit=1, file=sys.stdout)
            self.tasks.task_done()
            
            
    def ConnectionSet(self,connectionStr):
        Changed =  False
        if not hasattr(self,'connectionString'):
            Changed =  True
            self.connectionString = connectionStr
        if self.connectionString != connectionStr:
            Changed =  True
            self.connectionString = connectionStr
        if not hasattr(self,'conn'):
            Changed =  True
        if Changed:
            self.conn = httplib.HTTPConnection(connectionStr)
            
        
class SqueezeConnectionThreadPool:
    """Pool of threads consuming tasks from a queue"""
    def __init__(self, squeezeConMdle,num_threads = 10):
        
        self.squeezeConMdle = squeezeConMdle
        
        self.tasks = Queue(num_threads)
        self.arrayOfSqueezeConnectionWorker = []
        for _ in range(num_threads): 
            new = SqueezeConnectionWorker(self.tasks)
            self.arrayOfSqueezeConnectionWorker.append(new)

    def wait_completion(self):
        """Wait for completion of all the tasks in the queue"""
        self.tasks.join()
    def sendMessage(self,func,message, *args, **kargs):
        params = json.dumps(message, sort_keys=True, indent=4)
        self.tasks.put((func,params, args, kargs))
        
    def RecConnectionOnline(self):
        
        self.sendMessage(self.OnPlayerCount,{ 
            "method":"slim.request",
            "params": [ '-', [ 'player', 'count', '?' ] ]
        })
        
    def OnConnectionStrChange(self,value):
        oldvalue = self.squeezeConMdle.connectionStr.get()
        for player in range(len(self.arrayOfSqueezeConnectionWorker)):
            self.arrayOfSqueezeConnectionWorker[player].ConnectionSet(oldvalue)
        oldValue = self.squeezeConMdle.connected.get()
        self.squeezeConMdle.connected.set(False)
        
        
    def OnPlayerCount(self,responce):
        noPlayers = int(responce["result"]["_count"])
        self.noPlayers = noPlayers
        #print "self.noPlayers=%s" % ( noPlayers )
        self.squeezeConMdle.connected.set(True)
        oldValue = self.squeezeConMdle.connected.get()
        if oldValue == noPlayers:
            return
        self.squeezeConMdle.playersCount.set(noPlayers)
        oldValue = self.squeezeConMdle.connected.get()
        if oldValue != True:
            self.squeezeConMdle.connected.set(True)
        for index in range(self.noPlayers):            
            msg = { 
                "method":"slim.request",
                "params": [ '-', [ 'player', 'id', index ,"?"] ]
            }
            self.sendMessage(self.OnPlayerIndex,msg)
            msg = { 
                "method":"slim.request",
                "params": [ '-', [ 'player', 'name', index ,"?"] ]
            }
            self.sendMessage(self.OnPlayerName,msg)

    def OnPlayerIndex(self,responce):
        playerId = responce["result"]["_id"]
        playerIndex = int(responce['params'][1][2])
        self.squeezeConMdle.playerList[playerIndex].identifier.set(playerId)
    def OnPlayerName(self,responce):
        playerName = responce["result"]["_name"] 
        playerIndex = int(responce['params'][1][2])
        self.squeezeConMdle.playerList[playerIndex].name.set(playerName)
    def OnPlayerStatus(self,responce):
        #print "OnPlayerStatus:",datetime.datetime.now()
        print unicode(json.dumps(responce, sort_keys=True, indent=4))
        playerName = unicode(responce["result"]["player_name"])
        playerIndex = int(responce['id'])
        playlist_cur_index = int(responce["result"]["playlist_cur_index"])
        playlist_loop = responce["result"]["playlist_loop"]
        
        lsbsMode = unicode(responce["result"]["mode"])
        mappings = {"play" : "playing",
            "pause" : "paused",
            "off" : "Off"
        }
        OldplayerName = self.squeezeConMdle.playerList[playerIndex].name.get()
        if OldplayerName != playerName:
            self.squeezeConMdle.playerList[playerIndex].name.set(playerName)
        
        
        if lsbsMode in mappings:
            self.squeezeConMdle.playerList[playerIndex].operationMode.set(mappings[lsbsMode])
        
        CurrentTrackTitle = None
        for item in playlist_loop:
            playlistIndex = int(item["playlist index"])
            if playlistIndex == playlist_cur_index:
                CurrentTrackTitle = unicode(item["title"])
                OldCurrentTrackTitle = self.squeezeConMdle.playerList[playerIndex].CurrentTrackTitle.get()
                if CurrentTrackTitle  != OldCurrentTrackTitle:
                    self.squeezeConMdle.playerList[playerIndex].CurrentTrackTitle.set(CurrentTrackTitle)
                    
            
       
class squeezeConCtrl:
    def __init__(self,model):  
        self.model = model
        self.view1 = SqueezeConnectionThreadPool(self.model)
        self.model.connectionStr.addCallback(self.view1.OnConnectionStrChange)
        self.model.CbPlayersAvailableAdd(self._OnPlayersNameChange)
        self.model.connected.addCallback(self.OnConnection)
        self.mapping = {}
        self.CbConnection = []
        self.CbPlayersList = []

    def  RecConnectionOnline(self):
        #self.view1.RecConnectionOnline()
        self.view1.sendMessage(self.view1.OnPlayerCount,{ 
            "method":"slim.request",
            "params": [ '-', [ 'player', 'count', '?' ] ]
        })
    
    def ConectionStringSet(self,Conecxtionstring):
        oldConecxtionstring = self.model.connectionStr.get()
        if oldConecxtionstring != Conecxtionstring:
            self.model.connectionStr.set(Conecxtionstring)
            self.RecConnectionOnline()
            
    def ServerHostSet(self,hostname):
        oldHost = self.model.port.get()
        if oldHost != hostname:
            self.model.host.set(hostname)
            self.RecConnectionOnline()
    def ServerPortSet(self,port):
        oldPort = self.model.port.get()
        if oldPort != port:
            self.model.port.set(port)
            self.RecConnectionOnline()

    def _OnPlayersNameChange(self,value,dfd):
        #print (self,value,dfd)
        playersCount = self.model.playersCount.get()
        for index in range(playersCount):
            #print index
            name = self.model.playerList[index].name.get()
            if None != name:
                self.mapping[ name] =index

    def PlayersList(self):
        self.mapping = {}
        playerList = []
        playersCount = self.model.playersCount.get()
        for index in range(playersCount):
            player = self.model.playerList[index].name.get()
            if player != None:
                playerList.append(player)
                self.mapping[player] = index
        return playerList

    def CbPlayersListAdd(self, func, *args, **kargs):
        """Add a task to the queue"""
        self.CbPlayersList.append((func, args, kargs))

    def CbPlayersLisCbPlayersAvailableAdd(self, func, *args, **kargs):    
        self.model.CbPlayersAvailableAdd(func, args, kargs)

    def CbConnectionAdd(self, func, *args, **kargs):
        """Add a task to the queue"""
        self.CbConnection.append((func, args, kargs))
    def OnConnection(self,value):
        #print "OnConnection(value)=%s" % value
        self.mapping = {}
        for func, args, kargs in self.CbConnection:
            func(value,*args, **kargs)

    def OnPlayersList(self,value):
        #print "OnConnection(value)=%s" % value
        for func, args, kargs in self.CbConnection:
            func(value,*args, **kargs)

    def ConnectionOnline(self):
        return self.model.connected.get()
        
    def RecPlayerStatus(self,player):
        #print "self.mapping,player1"
        if not self.model.connected.get():
            return None
        if not player in self.mapping:
            return None
        #print "self.mapping,player2"
        playerIndex = self.mapping[player]
        playerId = self.model.playerList[playerIndex].identifier.get()
        reponce = self.view1.sendMessage(self.view1.OnPlayerStatus,{ 
            "id":playerIndex,
            "method":"slim.request",
            "params":[ playerId, 
                    ["status","-","4","tags:playlist_id"]
                ]
        })
        
        
        #Eself.view1.sendMessage(self.view1.OnPlayerCount,{ 
        #    "method":"slim.request",
        #    "params": [ '-', [ 'player', 'count', '?' ] ]
        #})
        #self.view1.RecPlayerStatus()        
    def Pause(self,player):
        #print self.mapping,player
        if not self.model.connected.get():
            return None
        if not player in self.mapping:
            return None
        playerIndex = self.mapping[player]
        playerId = self.model.playerList[playerIndex].identifier.get()
        reponce = self.view1.sendMessage(None,{ 
            "id":playerIndex,
            "method":"slim.request",
            "params":[ playerId, 
                    ["pause"]
                ]
        })
    def Play(self,player):
        if not self.model.connected.get():
            return None
        if not player in self.mapping:
            return None
        playerIndex = self.mapping[player]
        playerId = self.model.playerList[playerIndex].identifier.get()
        reponce = self.view1.sendMessage(None,({ 
            "id" : playerIndex,
            "method":"slim.request",
            "params":[ playerId, 
                    ["play"]
                ]
        }))
    def Index(self,player,Count):
        if not self.model.connected.get():
            return None
        if not player in self.mapping:
            return None
        prefix = ""
        if Count > 0:
            prefix = "+"
        playerIndex = self.mapping[player]
        playerId = self.model.playerList[playerIndex].identifier.get()
        reponce = self.view1.sendMessage(None,({ 
            "id":playerIndex,
            "method":"slim.request",
            "params":[ playerId, 
                    ["playlist","index",prefix + unicode(Count)]
                ]
        }))


    def PlayRandomSong(self,player):
        if not self.model.connected.get():
            return None
        if not player in self.mapping:
            return None
        playerIndex = self.mapping[player]
        playerId = self.model.playerList[playerIndex].identifier.get()
        reponce = self.view1.sendMessage(None,({ 
            "id":playerIndex,
            "method":"slim.request",
            "params":[ playerId, 
                    ["randomplay",'tracks']
                ]
            }))
    
    def PlayerStatus(self,player):
        
        if not self.model.connected.get():
            return None
        if not player in self.mapping:
            return None
        playerIndex = self.mapping[player]
        playerId = self.model.playerList[playerIndex].identifier.get()
        reponce = self.view1.sendMessage(self.view1.OnPlayerStatus,({ 
            "id":playerIndex,
            "method":"slim.request",
            "params":[ playerId, 
                    ["status",'-','2','tags']
                ]
            }))
        #print "PlayerStatus:",datetime.datetime.now()

class TaskBarIcon(wx.TaskBarIcon):
    def __init__(self):
        super(TaskBarIcon, self).__init__()
        self.set_icon(TRAY_ICON)
        
        self.Bind(wx.EVT_TASKBAR_MOVE, self.on_move)
        self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.on_left_down)
        self.Bind(wx.EVT_TASKBAR_LEFT_UP, self.on_left_up )
        #self.Bind(wx.EVT_TASKBAR_RIGHT_DOWN, self.on_right_down )
        #self.Bind(wx.EVT_TASKBAR_RIGHT_UP, self.on_right_up )
        self.Bind(wx.EVT_TASKBAR_LEFT_DCLICK, self.on_left_dclick)
        self.Bind(wx.EVT_TASKBAR_RIGHT_DCLICK, self.on_right_dclick)
        #self.Bind(wx.EVT_TASKBAR_CLICK, self.on_click )
        #self.squeezecmd = sc
        self.Example = None
        self.Connect(-1, -1, EVT_RESULT_ID, self.OnResult)
        self.Connect(-1, -1, EVT_RESULT_CONNECTED_ID, self.OnConnected)
        self.Connect(-1, -1, EVT_RESULT_PLAYERS_ID, self.OnPlayers)
        self.Connect(-1, -1, EVT_RESULT_CURRENT_TRACK_ID, self.OnTrack)
        self.ToolTipText = TRAY_TOOLTIP
        
        
        TIMER_ID = wx.NewId()  # pick a number
        self.timer = wx.Timer(self, TIMER_ID)  # message will be sent to the panel
        self.timer.Start(9000)  # x100 milliseconds
        wx.EVT_TIMER(self, TIMER_ID, self.on_timer)  # call the on_timer function
        
        
        
    def GetSqueezeServerPlayer(self):
        if not hasattr(self,'app'):
            return None
        return self.app.GetSqueezeServerPlayer()
    def OnShowPopup(self, event):
        pos = wx.GetMousePosition()
        #pos = event.GetPosition()
        
        
        
        #pos = self.panel.ScreenToClient(pos)

    def on_timer(self,event):
        #print "on_timer"
        if not self.app.model.connected.get():
            print "not on line"
            self.app.RecConnectionOnline()
            return
        player = self.app.GetSqueezeServerPlayer()
        if player != None:
            self.app.squeezeConCtrl.PlayerStatus(player)
            return
        self.app.squeezeConCtrl.RecConnectionOnline()

    def CreatePopupMenu(self):
        toolsMENU = wx.Menu()
        
        create_menu_item(toolsMENU, 'Play', self.onScPlay)
        create_menu_item(toolsMENU, 'Pause', self.onScPause)
        create_menu_item(toolsMENU, 'Next', self.onScNext)
        create_menu_item(toolsMENU, 'Previous', self.onScPrevious)
        create_menu_item(toolsMENU, 'Rnd', self.onScRandom)
        #machinesMENU = wx.Menu() 
        
        #moldsMENU = wx.Menu() 
        #toolsMENU.AppendMenu(-1, "Command", machinesMENU) 
        
        
        #toolsMENU.AppendMenu(-1, "Molds", moldsMENU) 

        #create_menu_item(moldsMENU, 'Say Hello', self.on_hello)
        toolsMENU.AppendSeparator()
        create_menu_item(toolsMENU, 'Settings', self.on_settings)
        toolsMENU.AppendSeparator()
        create_menu_item(toolsMENU, 'Exit', self.on_exit)
        return toolsMENU
    def set_icon(self, path):
        self.icon = wx.IconFromBitmap(wx.Bitmap(path))
        CurrentToolTip = TRAY_TOOLTIP
        if hasattr(self,'ToolTipText'):
            CurrentToolTip = self.ToolTipText
        self.SetIcon(self.icon, CurrentToolTip)
    def set_toolTip(self, tooltip):
        if self.ToolTipText == tooltip:
            return
        if hasattr(self,'icon'):
            self.SetIcon(self.icon, tooltip)
        self.ToolTipText = unicode(tooltip)
    def on_move(self, event):
        #print 'on_move'
        pass
        
        #print self.ScreenToClient(wx.GetMousePosition())
    def on_left_up(self, event):
        print 'on_left_up'
        print self.GetSqueezeServerPlayer()
        player = self.GetSqueezeServerPlayer()
        if player != None:
            self.app.squeezeConCtrl.RecPlayerStatus(player)
        else:
            self.on_settings(event)
    def on_right_down(self, event):
        #print 'on_right_down'
        pass
    def on_right_up(self, event):
        #print 'on_right_up'
        menu = self.CreatePopupMenu()
        #print dir (menu)
    def on_right_dclick(self, event):
        #print 'on_right_dclick'
        self.frame.PopupMenu( menu, event.GetPoint() )
    def on_click(self, event):
        #print 'on_click'
        pass
    
    def on_left_down(self, event):
        #print 'Tray icon was left-clicked.'
        pass
    def on_left_dclick(self, event):
        #print 'Tray icon was on_left_dclick-clicked.'
        self.set_icon('gnomedecor1.png')
        self.OnShowPopup( event)
    def on_hello(self, event):
        print 'Hello, world!'
    def on_exit(self, event):
        self.on_settings_close(event)
        wx.CallAfter(self.Destroy)
    def onScPlay(self, event):
        player = self.GetSqueezeServerPlayer()
        if player != None:
            self.app.squeezeConCtrl.Play(player)
        else:
            self.on_settings(event)
    
    def onScPause(self, event):
        player = self.GetSqueezeServerPlayer()
        if player != None:
            self.app.squeezeConCtrl.Pause(player)
        else:
            self.on_settings(event)
    def onScNext(self, event):
        player = self.GetSqueezeServerPlayer()
        if player != None:
            #self.squeezecmd.squeezecmd_Index(player,1)
            
            self.app.squeezeConCtrl.Index(player,1)
        else:
            self.on_settings(event)
    def onScPrevious(self, event):
        player = self.GetSqueezeServerPlayer()
        if player != None:
            #self.squeezecmd.squeezecmd_Index(player,-1)
            self.app.squeezeConCtrl.Index(player,-1)
        else:
            self.on_settings(event)
    def onScRandom(self, event):
        player = self.GetSqueezeServerPlayer()
        if player != None:
            #self.squeezecmd.squeezecmd_randomplay(player)
            self.app.squeezeConCtrl.PlayRandomSong(player)
        else:
            self.on_settings(event)


    def on_settings(self, event):
        if (self.Example == None):
            self.Example = Example(None, title='Settings')
            self.Example.Bind(wx.EVT_CLOSE, self.on_settings_close)
            self.Example.cfg = self.cfg
            self.Example.app = self.app
            self.Example.Show()
    def on_settings_close(self, event):
        if (self.Example != None):
            self.Example.Destroy()
            self.Example = None

    def OnResult(self, event):
        if (self.Example == None):
            return
            
        
        self.Example.OnConnected(event)
        return
    def OnConnected(self, event):
        #print "OnConnected(=%s)" % (Event)
        if (self.Example == None):
            return
            self.Example.OnConnected(event)
        return
        
    def OnPlayers(self, event):
        #print "OnPlayers(=%s)" % (Event)
        if (self.Example != None):
            self.Example.UpdateCbPlayer()
            return
        
    def OnTrack(self, event):
        player = self.GetSqueezeServerPlayer()
        if player != None:
            for index in  range(len(self.app.model.playerList)):
                playerName = self.app.model.playerList[index].name.get()
                if playerName == player:
                    newToolTip = self.app.model.playerList[index].CurrentTrackTitle.get()
                    self.set_toolTip(newToolTip)

class Example(wx.Frame):
  
    def __init__(self, parent,  title):
        
        self.parent = parent
        self.title = title
        w, h = (250, 250)
        wx.Frame.__init__(self, self.parent, -1, self.title, wx.DefaultPosition, wx.Size(w, h))
        self.CreateStatusBar()
        
        self.SetStatusText("Demonstration of wxPython")
        self.sizer = wx.GridBagSizer(8, 3)
        
        
        self.BtnApply = wx.Button(self,-1, "Apply")
        self.BtnCancel = wx.Button(self,-1, "Cancel")
        self.BtnSave = wx.Button(self,-1, "Save")
        

        self.Bind(wx.EVT_BUTTON, self.OnCancel, id=self.BtnCancel.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnSave,id=self.BtnSave.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnApply,id=self.BtnApply.GetId())

        
        
        
        self.sizer.Add(self.BtnApply, (8, 0), wx.DefaultSpan, wx.EXPAND)
        self.sizer.Add(self.BtnCancel, (8, 1), wx.DefaultSpan, wx.EXPAND)
        self.sizer.Add(self.BtnSave, (8, 2), wx.DefaultSpan, wx.EXPAND)
        
        label1 = wx.StaticText(self, -1, 'Host:')
        
        self.sizer.Add(label1, (0, 0), wx.DefaultSpan, wx.EXPAND)
        
        self.tcHost = wx.TextCtrl(self, -1 )
        self.sizer.Add(self.tcHost , (0, 1), (1,2), wx.EXPAND)
        label2 = wx.StaticText(self, -1, 'Port:')
        
        
        self.sizer.Add(label2, (1, 0), wx.DefaultSpan, wx.EXPAND)
        label3 = wx.StaticText(self, -1, 'Player:')
        
        self.sizer.Add(label3, (2, 0), wx.DefaultSpan, wx.EXPAND)
        
        self.scPort = wx.SpinCtrl(self, -1, unicode(9000),  min=1, max=99999)
        self.sizer.Add(self.scPort, (1, 1),wx.DefaultSpan, wx.EXPAND)
        #self.statusbar = self.CreateStatusBar()
        #self.sizer.Add(self.statusbar, (9, 0),(2,9), wx.EXPAND)
        
        self.cbPlayer = wx.ComboBox(self, -1, style=wx.CB_READONLY)
        self.sizer.Add(self.cbPlayer, (2, 1), (1,2), wx.EXPAND)
        
        
        self.sizer.AddGrowableRow(8)
        self.sizer.AddGrowableCol(0)
        self.sizer.AddGrowableCol(1)
        self.sizer.AddGrowableCol(2)
        
        self.SetSizerAndFit(self.sizer)
    
    def Show(self):
        self.UpdateCbPlayer()
        
        self.tcHost.SetValue(self.app.GetSqueezeServerHost())
        self.scPort.SetValue(self.app.GetSqueezeServerPort())
        
        self.Centre()
        #self.SetSize(wx.Size(w, h))
        super(Example, self).Show()
    def OnConnected(self,event):
        
        if True == self.app.squeezeConCtrl.ConnectionOnline():
            self.SetStatusText("Server Connected.")
        else:
            self.SetStatusText("Server not connected.")
        self.OnUpdate()
        print "self.app.squeezeConCtrl.PlayersList()=%s" % self.app.squeezeConCtrl.PlayersList()
    def UpdateCbPlayer(self):
        
        self.cbPlayer.Clear()
        
        #availablePlayers = self.app.ConMan.GetSqueezeServerPlayers()
        availablePlayers = self.app.squeezeConCtrl.PlayersList()
        #print "availablePlayers=%s" % (availablePlayers)
        
        
        for player in availablePlayers:
            self.cbPlayer.Append(player)
        if len(availablePlayers) > 0:
            CurrentPlayer = self.app.GetSqueezeServerPlayer()
            playerIndex = 0
            if CurrentPlayer != None:
                try:
                    playerIndex = availablePlayers.index(CurrentPlayer)
                except:
                    playerIndex = 0
            self.cbPlayer.SetSelection(playerIndex)
        
    def OnSave(self, event):
        self.OnApply(event)
        self.app.configSave()
        

    def OnApply(self, event):
        self.app.SetSqueezeServerHost(self.tcHost.GetValue())
        self.app.SqueezeServerPort.set((int(self.scPort.GetValue())))
        self.app.SetSqueezeServerPlayer(self.cbPlayer.GetValue())
        self.UpdateCbPlayer()
    def OnCancel(self, event):
        self.app.tb.on_settings_close(event)
        


class myapp(wx.App):
    def __init__(self):
        super(myapp, self).__init__()
        
        self.model = squeezeConMdle()
        self.SqueezeServerPort = Observable(9000)
        self.SqueezeServerPort.addCallback(self.OnSqueezeServerPort)
        self.cfg = wx.FileConfig(appName="ApplicationName", 
                                    vendorName="VendorName", 
                                    localFilename=".squeezetray.cfg", 
                                    style=wx.CONFIG_USE_LOCAL_FILE)
        self.squeezeConCtrl = squeezeConCtrl(self.model)
        
        self.configRead()
        self.tb = TaskBarIcon()
        #print "tb=%s" %self.tb
        self.tb.app = self
        self.tb.cfg = self.cfg
        self.squeezeConCtrl.CbConnectionAdd(self.handleConnectionChange,self.tb)
        self.model.CbPlayersAvailableAdd(self.handlePlayersChange,self.tb)
        self.model.CbChurrentTrackAdd(self.handleTrackChange)
        

    def configRead(self):
        squeezeServerHost = 'localhost'
        if self.cfg.Exists('squeezeServerHost'):
            squeezeServerHost = self.cfg.Read('squeezeServerHost')
            
        self.SetSqueezeServerHost(squeezeServerHost)
        squeezeServerPort = 9000
        if self.cfg.Exists('squeezeServerPort'):
            try:
                squeezeServerPortTmp = int(self.cfg.ReadInt('squeezeServerPort'))
            except ValueError:
                squeezeServerPort = 9000
        self.SqueezeServerPort.set(squeezeServerPort)
        self.squeezeConCtrl.ConectionStringSet("%s:%s" % (self.GetSqueezeServerHost(),self.SqueezeServerPort.get()))
        
        SqueezeServerPlayer = None
        if self.cfg.Exists('SqueezeServerPlayer'):
            SqueezeServerPlayer = self.cfg.Read('SqueezeServerPlayer')
            
        self.SetSqueezeServerPlayer(SqueezeServerPlayer)
        self.squeezeConCtrl.RecConnectionOnline()
        
    def configSave(self):
        self.cfg.Write("squeezeServerHost", self.GetSqueezeServerHost())
        self.cfg.WriteInt("squeezeServerPort", self.GetSqueezeServerPort())
        self.cfg.Write("SqueezeServerPlayer", self.GetSqueezeServerPlayer())
        self.cfg.Flush()
        
    def handleConnectionChange(self,value,window):
        #self.squeezeConCtrl.RecConnectionOnline()
        #print "value=%s" % value
        #print self.GetSqueezeServerHost()
        #print dir(self)
        if not hasattr(self,'tb'):
            print "no tb"
            return
        
        wx.PostEvent(self.tb, ResultEvent2(EVT_RESULT_CONNECTED_ID,value))
        
    
    def handlePlayersChange(self,value,window,asda):
        #print "value=%s,%s,%s,%s" % (value,window,asda)
        #print self.GetSqueezeServerHost()
        #print dir(self)
        if not hasattr(self,'tb'):
            print "no tb"
            return
        value = 0
        wx.PostEvent(self.tb, ResultEvent2(EVT_RESULT_PLAYERS_ID,value))
        
    def handleTrackChange(self,value):
        #print "value=%s,%s,%s,%s" % (value,window,asda,asdfg)
        #print self.GetSqueezeServerHost()
        #print dir(self)
        if not hasattr(self,'tb'):
            print "no tb"
            return
        value = 0
        wx.PostEvent(self.tb, ResultEvent2(EVT_RESULT_CURRENT_TRACK_ID,value))    


    def SetSqueezeServerHost(self,host):
        Changed = False
        if not hasattr(self,'SqueezeServerHost'):
            Changed = True
            self.SqueezeServerHost = 'localhost'
        if self.SqueezeServerHost != host:
            Changed = True
        try:
            self.SqueezeServerHost = unicode(host)
        except TypeError:
            self.SqueezeServerHost = 'localhost'
        if Changed:
            #print " host has changed to %s"  % (self.SqueezeServerHost)
            self.squeezeConCtrl.ServerHostSet(self.SqueezeServerHost)
            self.squeezeConCtrl.RecConnectionOnline()
            
        
    def GetSqueezeServerHost(self):
        if hasattr(self,'SqueezeServerHost'):
            return self.SqueezeServerHost
        return 'localhost'
        
    def OnSqueezeServerPort(self,value):
        self.squeezeConCtrl.ServerPortSet(self.SqueezeServerPort)
        self.squeezeConCtrl.RecConnectionOnline()

    def GetSqueezeServerPort(self):
        if hasattr(self,'SqueezeServerHost'):
            return self.SqueezeServerPort.get()
        return 9000
    def SetSqueezeServerPlayer(self,player):
        self.SqueezeServerPlayer = player
        #print "player=%s" % player
        self.squeezeConCtrl.RecPlayerStatus(player)
        
    def GetSqueezeServerPlayer(self):        
        if hasattr(self,'SqueezeServerPlayer'):
            return self.SqueezeServerPlayer
        if self.model.playersCount.get() > 0:
            return unicode(self.model.playerList[0].name.get())
        return None
    
        
    
        
def main():
    app = myapp()
    app.MainLoop()

if __name__ == '__main__':
    main()
